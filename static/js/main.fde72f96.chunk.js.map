{"version":3,"sources":["Table.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["TableHeader","react_default","a","createElement","TableBody","_ref","characterData","removeCharacter","rows","map","row","index","key","name","job","onClick","Table","_this$props","this","props","Table_TableHeader","Table_TableBody","Component","Form","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","_event$target","target","value","setState","defineProperty","initialState","state","_this2","_this$state","type","onChange","handleSubmit","App","characters","filter","character","i","toConsumableArray","concat","className","src_Table","src_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fde72f96.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst TableHeader = () => (\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Job</th>\n    </tr>\n  </thead>\n);\n\nconst TableBody = ({ characterData, removeCharacter }) => {\n  const rows = characterData.map((row, index) => (\n    <tr key={index}>\n      <td>{row.name}</td>\n      <td>\n        {row.job}\n        <button onClick={() => removeCharacter(index)}>Delete</button>\n      </td>\n    </tr>\n  ));\n  return <tbody>{rows}</tbody>;\n};\n\nclass Table extends Component {\n  render() {\n    const { characterData, removeCharacter } = this.props;\n    return (\n      <table>\n        <TableHeader />\n        <TableBody\n          characterData={characterData}\n          removeCharacter={removeCharacter}\n        />\n      </table>\n    );\n  }\n}\n\nexport default Table;\n","import React, { Component } from 'react';\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n\n    this.initialState = {\n      name: '',\n      job: '',\n    };\n    this.state = this.initialState;\n  }\n\n  handleChange = event => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  render() {\n    const { name, job } = this.state;\n    return (\n      <form>\n        <label>Name</label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={this.handleChange}\n        />\n        <label>Job</label>\n        <input\n          type=\"text\"\n          name=\"job\"\n          value={job}\n          onChange={this.handleChange}\n        />\n        <input\n          type=\"button\"\n          value=\"Submit\"\n          onClick={() => {\n            this.props.handleSubmit(this.state);\n            this.setState(this.initialState);\n          }}\n        />\n      </form>\n    );\n  }\n}\n\nexport default Form;\n","import React, { Component } from 'react';\nimport Table from './Table';\nimport Form from './Form';\n\nclass App extends Component {\n  state = {\n    characters: [],\n  };\n\n  removeCharacter = index => {\n    const { characters } = this.state;\n\n    this.setState({\n      characters: characters.filter((character, i) => i !== index),\n    });\n  };\n\n  handleSubmit = character => {\n    this.setState({\n      characters: [...this.state.characters, character],\n    });\n  };\n\n  render() {\n    const { characters } = this.state;\n    return (\n      <div className=\"App\">\n        <Table\n          characterData={characters}\n          removeCharacter={this.removeCharacter}\n        />\n        <Form handleSubmit={this.handleSubmit} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}